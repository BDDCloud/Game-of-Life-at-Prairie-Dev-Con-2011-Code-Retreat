// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace CodeRetreat.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Evolving a grid with some cells in it")]
    public partial class EvolvingAGridWithSomeCellsInItFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "03 - Multiple cells.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Evolving a grid with some cells in it", "In order to create a functioning rules engine\r\nAs a programmer of Conway\'s Game o" +
                    "f Life\r\nI can evolve a multiple cell grid", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sparse grid with nobody staying alive")]
        public virtual void SparseGridWithNobodyStayingAlive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sparse grid with nobody staying alive", ((string[])(null)));
#line 6
  this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table1.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table1.AddRow(new string[] {
                        ".",
                        "x",
                        ".",
                        "x",
                        "."});
            table1.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table1.AddRow(new string[] {
                        ".",
                        "x",
                        ".",
                        "x",
                        "."});
            table1.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
#line 7
    testRunner.Given("the following setup", ((string)(null)), table1);
#line 14
    testRunner.When("I evolve the board");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table2.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table2.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table2.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table2.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table2.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
#line 15
    testRunner.Then("I should see the following board", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Over-crowded grid")]
        public virtual void Over_CrowdedGrid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Over-crowded grid", ((string[])(null)));
#line 24
  this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table3.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table3.AddRow(new string[] {
                        ".",
                        "x",
                        "x",
                        "x",
                        "."});
            table3.AddRow(new string[] {
                        ".",
                        "x",
                        "x",
                        "x",
                        "."});
            table3.AddRow(new string[] {
                        ".",
                        "x",
                        "x",
                        "x",
                        "."});
            table3.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
#line 25
    testRunner.Given("the following setup", ((string)(null)), table3);
#line 32
    testRunner.When("I evolve the board");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table4.AddRow(new string[] {
                        ".",
                        ".",
                        "x",
                        ".",
                        "."});
            table4.AddRow(new string[] {
                        ".",
                        "x",
                        ".",
                        "x",
                        "."});
            table4.AddRow(new string[] {
                        "x",
                        ".",
                        ".",
                        ".",
                        "x"});
            table4.AddRow(new string[] {
                        ".",
                        "x",
                        ".",
                        "x",
                        "."});
            table4.AddRow(new string[] {
                        ".",
                        ".",
                        "x",
                        ".",
                        "."});
#line 33
    testRunner.Then("I should see the following board", ((string)(null)), table4);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple dead cells coming to life")]
        public virtual void MultipleDeadCellsComingToLife()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple dead cells coming to life", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table5.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table5.AddRow(new string[] {
                        ".",
                        "x",
                        "x",
                        "x",
                        "."});
            table5.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table5.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
#line 42
    testRunner.Given("the following setup", ((string)(null)), table5);
#line 48
    testRunner.When("I evolve the board");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
            table6.AddRow(new string[] {
                        ".",
                        ".",
                        "x",
                        ".",
                        "."});
            table6.AddRow(new string[] {
                        ".",
                        ".",
                        "x",
                        ".",
                        "."});
            table6.AddRow(new string[] {
                        ".",
                        ".",
                        "x",
                        ".",
                        "."});
            table6.AddRow(new string[] {
                        ".",
                        ".",
                        ".",
                        ".",
                        "."});
#line 49
    testRunner.Then("I should see the following board", ((string)(null)), table6);
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
